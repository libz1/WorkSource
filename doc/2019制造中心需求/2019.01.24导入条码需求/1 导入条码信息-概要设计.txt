2019.01.24  概要设计

0、添加数据结构（验证条码信息表），用于数据存储
	添加“日期信息(年月日时分秒)、导入设备PC地址、导入操作人”
	添加日期索引

1、添加“条码导入及查询”模块
	导入功能：可以选择文件，根据文件的第二个sheet中的信息进行条码导入存储
		涉及到“读取excel文件第2个页面的特定列数据”的功能实现
		导入速度过慢，10万行数据，插入数据库耗时10分钟，需要在前端界面显示变化

	查询功能：起始结束日期作为查询条件，列出相关数据，需要使用索引信息提高检索速度
		查询的信息可以导出为excel格式数据文件

3、生产测试过程中进行判断：
	扫描到了22位的条码信息
	1）进行最后一位校验位的验证，验证通过则进行后续操作
		2019.01.25调整，不能进行此项验证
		因为还有24位芯片ID的数据情况！24位芯片ID的CS计算方法不知道
		且有步骤2的验证，过程，此步骤无需执行
	2）在“验证条码信息表”中进行数据检索，如果有数据则进行后续操作
	3）如果上述两步验证出错，提示用户重新扫描，不做操作的数据库记录，但是做log记录

4、需要调整配置文件 hibernate.cfg_MySql.xml 添加数据结构信息
	发布时，此配置文件随同发布


5、代码严谨性
	如果arc下的配置文件没有及时更新，客户端运行程序时，需要明确的提示用户

更新程序要求：
	先更新一台电脑，进行验证
	确认无误再更新其他电脑，需要更新arc下的配置文件

导入文件格式需求
	只保留条码信息一个栏目，题目保留与否无所谓

预计开发及测试耗时4小时


select barcode from barcodesinfo  where barcode='1330054000080287617921';

    <mapping class="produce.entity.BarCodesInfo"/>


总结：
	实际耗时超过预期
	1、数据格式出乎意料，数据内容过大，此前未充分考虑
	2、制作新的界面耗时稍长，因为很长时间没有进行UI界面开发了，有些生疏
	3、与制造中心讨论耗时较长，因为数据量问题，曾经考虑是否仅仅添加起始和结束编号
		制造中心对于一些问题也需要内部讨论，决定最终结果
		以及获取相关的CS验证码，进行扫描条码的信息验证，但是后来制造中心提出还有不少无验证码的情况
		只好回到初始，重新考虑导入大数据的处理过程（xlsx文件，15万行数据）
	4、数据导入，使用升级版的xls处理程序，导入效率很低
		调整为csv简单格式，读取速度极大提高，写入数据效率无法大幅提高，调整为进度展示的手段
		导入15万数据，耗时大约5-6分钟
	5、生产过程为先期进行数据导入，然后再进行生产过程应用

	实际开发周期8小时多，不含等待交流的时间段
		