package util;

import static com.eastsoft.util.Debug.print;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.io.Reader;


/**
 * 读取文件类.
 *
 * @author xuky
 * @version 2013.10.24
 */
public class FileToRead {

	/**
	 * 以字节为单位读取文件.
	 * <p>
	 * 常用于读二进制文件，如图片、声音、影像等文件
	 *
	 * @param fileName
	 *            <code>String</code>文件名
	 */
	public static void readFileByBytes(String fileName) {

		InputStream in = null;

		// 以字节为单位读取文件内容，一次读一个字节
		try {
			System.out.println("以字节为单位读取文件内容，一次读一个字节：");

			// 以file为参数构造（创建）FileInputStream
			File file = new File(fileName);
			in = new FileInputStream(file);

			int tempbyte;
			while ((tempbyte = in.read()) != -1) {
				System.out.write(tempbyte);
			}
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
			return;
		}

		// 以字节为单位读取文件内容，一次读多个字节
		try {
			System.out.println("以字节为单位读取文件内容，一次读多个字节：");
			byte[] tempbytes = new byte[100];
			int byteread = 0;

			// 以文件名（字符串）为参数构造（创建）FileInputStream
			in = new FileInputStream(fileName);

			FileToRead.showAvailableBytes(in);
			// 读入多个字节到字节数组中，byteread为一次读入的字节数
			while ((byteread = in.read(tempbytes)) != -1) {
				System.out.write(tempbytes, 0, byteread);
			}
		} catch (Exception e1) {
			e1.printStackTrace();
		} finally {
			if (in != null) {
				try {
					in.close();
				} catch (IOException e1) {
				}
			}
		}
	}

	/**
	 * 以字符为单位读取文件.
	 * <p>
	 * 常用于读文本，数字等类型的文件
	 *
	 * @param fileName
	 *            <code>String</code>文件名
	 */
	public static void readFileByChars(String fileName) {
		File file = new File(fileName);
		Reader reader = null;

		// 一次读一个字符
		try {
			System.out.println("以字符为单位读取文件内容，一次读一个字节：");

			reader = new InputStreamReader(new FileInputStream(file));
			int tempchar;
			while ((tempchar = reader.read()) != -1) {
				// 对于windows下，rn这两个字符在一起时，表示一个换行。
				// 但如果这两个字符分开显示时，会换两次行。
				// 因此，屏蔽掉r，或者屏蔽n。否则，将会多出很多空行。
				if (((char) tempchar) != 'r') {
					System.out.print((char) tempchar);
				}
			}
			reader.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		// 一次读多个字符
		try {
			System.out.println("以字符为单位读取文件内容，一次读多个字节：");

			char[] tempchars = new char[30];
			int charread = 0;
			reader = new InputStreamReader(new FileInputStream(fileName));
			// 读入多个字符到字符数组中，charread为一次读取字符数
			while ((charread = reader.read(tempchars)) != -1) {
				// 同样屏蔽掉r不显示
				if ((charread == tempchars.length)
						&& (tempchars[tempchars.length - 1] != 'r')) {
					System.out.print(tempchars);
				} else {
					for (int i = 0; i < charread; i++) {
						if (tempchars[i] == 'r') {
							continue;
						} else {
							System.out.print(tempchars[i]);
						}
					}
				}
			}
		} catch (Exception e1) {
			e1.printStackTrace();
		} finally {
			if (reader != null) {
				try {
					reader.close();
				} catch (IOException e1) {
				}
			}
		}
	}

	/**
	 * 以行为单位读取文件.
	 * <p>
	 * 常用于读面向行的格式化文件
	 *
	 * @param fileName
	 *            <code>String</code>文件名
	 * @return <code>String</code>文件内容
	 */
	public static String readFileByLines(String fileName, Boolean sysprint, String separator) {
		String sRet = "";
		File file = new File(fileName);
		BufferedReader reader = null;
		try {
//			if (sysprint)
//				System.out.println("以行为单位读取文件内容，一次读一整行：");
			reader = new BufferedReader(new FileReader(file));
			String tempString = null;
//			int line = 1;
			// 一次读入一行，直到读入null为文件结束
			while ((tempString = reader.readLine()) != null) {
				// 显示行号
//				if (sysprint)
//					System.out.println("line " + line + ": " + tempString);
				sRet = sRet + tempString +separator;
//				line++;
			}
			reader.close();
		} catch (IOException e) {
//			print("文件不存在" + fileName);
			// e.printStackTrace();
		} finally {
			if (reader != null) {
				try {
					reader.close();
				} catch (IOException e1) {
				}
			}
		}
		return sRet;
	}

	/**
	 * 读取程序目录下的文件.
	 * <p>
	 * 路径信息为可执行程序所在目录下的文件(也可能是子目录下的文件)
	 *
	 * @param fileName
	 *            <code>String</code>文件名
	 */
	public static String readLocalFile1(String fileName) {
		String str = "";
		try{
			fileName = System.getProperty("user.dir") + "\\" + fileName;
			str = FileToRead.readFileByLines(fileName, false, "");
		}
		catch (Exception e) {
//			SharedPreferences preferences = getSharedPreferences("PLCDebug", 0);
//			str = preferences.getString("SoftParameter", null);
//			if (str == null)
//				str = "";

		}
		return str;
	}

	/**
	 * 读取程序目录下的文件.
	 * <p>
	 * 路径信息为可执行程序所在目录下的文件(也可能是子目录下的文件)
	 *
	 * @param fileName
	 *            <code>String</code>文件名
	 */
	public String readFile(String fileName) {
		String str = "";
		try{
			fileName = System.getProperty("user.dir") + "\\" + fileName;
			str = FileToRead.readFileByLines(fileName, false, "");
		}
		catch (Exception e) {
//			SharedPreferences preferences = getSharedPreferences("PLCDebug", 0);
//			str = preferences.getString("SoftParameter", null);
//			if (str == null)
//				str = "";

		}
		return str;
	}



	/**
	 * 随机读取文件内容
	 *
	 * @param fileName
	 *            文件名
	 */
	public static void readFileByRandomAccess(String fileName) {
		RandomAccessFile randomFile = null;
		try {
			System.out.println("随机读取一段文件内容：");
			// 打开一个随机访问文件流，按只读方式
			randomFile = new RandomAccessFile(fileName, "r");
			// 文件长度，字节数
			long fileLength = randomFile.length();
			// 读文件的起始位置
			int beginIndex = (fileLength > 4) ? 4 : 0;
			// 将读文件的开始位置移到beginIndex位置。
			randomFile.seek(beginIndex);
			byte[] bytes = new byte[10];
			int byteread = 0;
			// 一次读10个字节，如果文件内容不足10个字节，则读剩下的字节。
			// 将一次读取的字节数赋给byteread
			while ((byteread = randomFile.read(bytes)) != -1) {
				System.out.write(bytes, 0, byteread);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (randomFile != null) {
				try {
					randomFile.close();
				} catch (IOException e1) {
				}
			}
		}
	}

	/**
	 * 显示输入流中还剩的字节数
	 *
	 * @param in
	 */
	private static void showAvailableBytes(InputStream in) {
		try {
			System.out.println("当前字节输入流中的字节数为:" + in.available());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		String fileName = "C:/temp/newTemp.txt";
		// ReadFromFile.readFileByBytes(fileName);
		// ReadFromFile.readFileByChars(fileName);
		String str = FileToRead.readFileByLines(fileName, false,"");
		print(str);
		// ReadFromFile.readFileByRandomAccess(fileName);
	}

}
